#include <iostream>
#include <string>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <sstream>
#include <NTL/ZZ.h>
using namespace std;
using namespace NTL;

ZZ modulo(ZZ a, ZZ b)
{
    ZZ r;
    r = a - b * (a / b);
    r = r + (r < 0) * b;
    return r;
}
ZZ euclides (ZZ x, ZZ y)
{
	ZZ q,r;
	q = x/y;
	r = modulo(x,y);

	while (r!=0)
	{
		x = y;
		y = r;
		q = x/y;
		r = modulo(x,y);
	}
	return y;
}
ZZ euclidesext(ZZ a, ZZ b)
{
	ZZ r1,r2,s1,s2,t1,t2,d;
	r1 = a;
	r2 = b;
	s1 = 1;
	s2 = 0;
	t1 = 0;
	t2 = 1;
	d = euclides(a,b);
	ZZ r, s, t;

	while (r2>0)
	{
		ZZ q ;
		q = r1 / r2;
		r = r1 - (q*r2);
		r1 = r2;
		r2 = r;

		s = s1 - (q*s2);
		s1 = s2;
		s2 = s;

		t = t1 - (q*t2);
		t1 = t2;
		t2 = t;
	}
	return s1; //Inversa
}
ZZ inversa(ZZ a, ZZ b)
{
	ZZ inv;
	inv = euclidesext(a, b);
	if (inv < 0)
	{
		inv = modulo(inv, b);
	}
	return inv;
}
ZZ potencia(ZZ x, ZZ y, ZZ cl)
{
    ZZ counter; counter = 0;
    ZZ result; result = x;
    if (y == 0)
    {
        return ZZ(1);
    }
    else if (y == 1)
    {
        return x;
    }
    while (counter != y - 1)
    {
        result = result * x;
        counter++;
    }
    result = modulo(result,cl);
    return result;
}
ZZ resto (ZZ b1,ZZ mod1,ZZ b2,ZZ mod2, ZZ exp1, ZZ exp2) //Base1,mod1,Base2,mod2,exponente
{
    if (euclides(mod1,mod2)==1)
    {
        ZZ Ea, Eb;
        Ea = modulo(exp1,mod1-1);
        Eb = modulo(exp2,mod2-1);

        ZZ a1, a2;
        a1 = potencia(b1,Ea,mod1);
        a2 = potencia(b2,Eb,mod2);

        ZZ N;
        N = mod1*mod2;

        ZZ div1, div2;
        div1 = N/mod1;
        div2 = N/mod2;

        ZZ y1, y2;
        y1 = inversa(div1,mod1);
        y2 = inversa(div2,mod2);

        ZZ x;
        x = (a1*div1*y1)+(a2*div2*y2);
        x = modulo(x,N);
        cout<<"El valor de x es: ";
        return x;
    }
    else
    {
        cout<<"Los modulos no son coprimos entre si, por lo que no cumple las condiciones para el uso del teorema."<<endl;
    }
}

int main(){

	ZZ B1, B2, E1, E2, mod1, mod2;
	B1 = conv<ZZ>("88116896630962983982412530039381688547857462888273319318080578528952292831262365529592279199817455982757152990648876539406586611676344043065518649142659573282581818364145299141180107376512037506484280733086655599559252689993861571154392998140136089817611756849097414224111730733902425933527259608671212992698353827646966896592709276985471674257502872986271764023533125850170416613131215603625739486751220302686240641499160788142789189691083868092407031009449200572439153779423399548685493681125744439226002858901688332312023644110309705933594130040945106316179345496142857706173765313681521499476791068685991881370658040917853856342560280016943491668443734947741484169918376127805119839506120034443339439716060235761639346703370367195636962686621556136248453450953981862622797044469615717281622128844231808370490747046885048316501478786211466167258277607159423565085667875861908844119290843173038916798175799247007209101223822336651843392150859986947101263317095540294944200506702249592459732440374333197392635400754130681292935952497961623844852683593573068949699848935692643897268731377926203028826080352888602633831926950328054540095684030595124387022763221343851273877802826824608391824176914330449389660555432983451237759959757362486277507212228486082602583441336659806668846379809571012954112913887253592686141929037224125487964563663213311141635976198433416831903568591255305803387095438530302664970955422522749005964472135766136640334338270332862811424761016419618167423889973456783781934039722598201614464388564731656237661867018229703501316979215076235722014312503349155800422569460376507253324693755195420515641512538006633960430156886436012137831715435135930236903569283569224903361180543020099255080645050010388357731569518333708088623766753287020145434440987090398984553771584780804281621257475922251804134542833790610334424680515709604221021343019893954963213351350895572917728754275015817926982393709486287214564798201502341380454029163091857944468792708467001471353556271322333578220302078495930459113008981805389143462342217784811666149676621120641255536285140020248875384394136575791344720101685868186128194086915090444310855611481245152673815871672050883058583488459885909436428181971345102127476587465217021171972017176447380162417008641889827091671829427148743825017195212441022368992541122922191430655332083473405143239345442402787902946816827807421368744481307881421150974726308559725492356904584329463887267339621789424609960041845346464556032903025759469345455460795691368433537652224313062290080252828714803785509453322497811276127367968501678904820242837925961310716747334058793750097161429105373230294584599454639151794883336667784732668614404085127187889696389455819145279482160638800697444375472057641354000479969154259561454955656752330055863626061385495717175436449025435284271828622252629639612520445298824891082186253347551120094359909257077793478624943156528210620716748666761881136039370433628223550102013009034990647695248203362418259213487963632307849857408028177047239477633033511856760865647325221016471931795306628903767571751");
	E1 = conv<ZZ>("83080585556240410424096389134120354452292477133732800833272721134755963864978226072572240629601971295033055182337921009737365513159783992254498105588915891282172552432948299833663874235407103022032420347039527847535089925152602819421059860043100204446014728702553752449784724918222296076351114695893105279215590433678250105549435896888923007676856769876392648775637035623175206710742230593609163008557996833821787886112877152126085285194284002260951164971470533187270947288464903876046708386388609048229888611426050048379232660703010030561755095137783375642889161395015709775572770429655872841914250340457687078312793815219126411400895604490681241661303874720769788749468863263711297383826487856877472486143450425901508254937954255018257832099678420136422119351251810283241798699693769417630123140033971929000624790658278760891858959322129292348270219281455047230917520199334615138544852706885846558834844250936204544053425255063042394733396316857772995538649765642632669975921152997955819617177855341932889170004058742160397921495273627765880503949690448434594092311006959435734151494011180988599195973667478376388444319573617824982209154976319919933157319020435373251883656684119519790861993727381919703993597284412560223446695669042928473787657848496545978196823989528945288396762840163107478916873225096017907200042771467312355290029605464894696095322759717632229268483476484165486461665203660903394094014722059441044367930365439349964565007873677533457324429904509380269343507657453084283953699969450597326598216893745618814952769506429003741866999513075834971225043450907598851186361859925083418708327545402439248604420231055377113092111022107307155350191391346849379533685350830596543570095222052419987435056051223629587668007934940732902002263139694624680125579118613115082189181074347922477382302829007609763205388547593803050418333770910888296591324964698724007480893995009876430320591132794380187774422227578001144447474133607322343100317621249285436124892676524520511408436744839706528922999170467957574808680209155742212537198545206407839461808656177953086789372391967201669860408369224613956243688559781974752728647262284461389892612216831202384684228541787148851894169682436543123556238878061239722047498159487559200874648469802767823537891508375223711506051169184404259232002791049215630303379571856216161815101952582368299311575602197781050345175716202967965979879850943027929550211507068241873041238078478921362603657624824490194576120234667109976529739322883903805653497714758073495737115198964766926285815167273515392550327880578751203934991026925991658150897741833935857361166145086464460574502543830589302877123832102968115058910484592588218678252095487072613362881505298295741973154829920647773001159010993607757547700888253180323641396094128088933909702539070298964893383515131364882254191110680976527126891623891251951297046130959889512559076042580829467217352277650910977796950027326706205900747840646964013487249447728439484597412444505188923966141745078320216030805254031373219590566084508338794891853501166385104231091729875941852050458543");
	B2 = conv<ZZ>("88116896630962983982412530039381688547857462888273319318080578528952292831262365529592279199817455982757152990648876539406586611676344043065518649142659573282581818364145299141180107376512037506484280733086655599559252689993861571154392998140136089817611756849097414224111730733902425933527259608671212992698353827646966896592709276985471674257502872986271764023533125850170416613131215603625739486751220302686240641499160788142789189691083868092407031009449200572439153779423399548685493681125744439226002858901688332312023644110309705933594130040945106316179345496142857706173765313681521499476791068685991881370658040917853856342560280016943491668443734947741484169918376127805119839506120034443339439716060235761639346703370367195636962686621556136248453450953981862622797044469615717281622128844231808370490747046885048316501478786211466167258277607159423565085667875861908844119290843173038916798175799247007209101223822336651843392150859986947101263317095540294944200506702249592459732440374333197392635400754130681292935952497961623844852683593573068949699848935692643897268731377926203028826080352888602633831926950328054540095684030595124387022763221343851273877802826824608391824176914330449389660555432983451237759959757362486277507212228486082602583441336659806668846379809571012954112913887253592686141929037224125487964563663213311141635976198433416831903568591255305803387095438530302664970955422522749005964472135766136640334338270332862811424761016419618167423889973456783781934039722598201614464388564731656237661867018229703501316979215076235722014312503349155800422569460376507253324693755195420515641512538006633960430156886436012137831715435135930236903569283569224903361180543020099255080645050010388357731569518333708088623766753287020145434440987090398984553771584780804281621257475922251804134542833790610334424680515709604221021343019893954963213351350895572917728754275015817926982393709486287214564798201502341380454029163091857944468792708467001471353556271322333578220302078495930459113008981805389143462342217784811666149676621120641255536285140020248875384394136575791344720101685868186128194086915090444310855611481245152673815871672050883058583488459885909436428181971345102127476587465217021171972017176447380162417008641889827091671829427148743825017195212441022368992541122922191430655332083473405143239345442402787902946816827807421368744481307881421150974726308559725492356904584329463887267339621789424609960041845346464556032903025759469345455460795691368433537652224313062290080252828714803785509453322497811276127367968501678904820242837925961310716747334058793750097161429105373230294584599454639151794883336667784732668614404085127187889696389455819145279482160638800697444375472057641354000479969154259561454955656752330055863626061385495717175436449025435284271828622252629639612520445298824891082186253347551120094359909257077793478624943156528210620716748666761881136039370433628223550102013009034990647695248203362418259213487963632307849857408028177047239477633033511856760865647325221016471931795306628903767571750");
	E2 = conv<ZZ>("6033343739693485707488053661231063571722483662577075512742882238711224368046846739607519385960537635417193414936663686902236328021348712340511918038417024881436812692634166384456406465633820696715104764155773804008051120459655383420878427697911962857168504899293288346788444386553152131633111579648859987492986410703296626353329038649159899539013420794854302124953069569171895690531962576377780835323643498355489039834852747766250358875777147306292813285885619806682083778695067622514805844863444249679342824634116795747008638186508418647446309996794430503793334256298770155629481687608412784757848135963259231478451837867399738524547769536680057487292417464474985798397502304074626926906999056291139541796872391726903195104016791522848297160428448141530906434125556980430347566424625382454269670803998937886634657153873196087967809786571252647059565140360977807285445647851058664168393775496561796642690353080368009508498392590949150329973500608100211807896377078878613208003269433699939620822432702136773201859183299623091230689622713301943960041295579306470416840424147229527620764226354868010164541298395662759012360812272876238623133038208997032271143285816332397959314134420908837577706978109397685415190839065446162303635638801326669903240344070790143086314543594139645774991369780422854399298991676505155010623379556179194592717120338914328673551698821482562080731636157217274725081747850189481230472158451324977565421716424404017579928636728957821026452228837386887135426606570604126208294260320348626159783318013861116046833");
	mod1 = conv<ZZ>("45");
	mod2 = conv<ZZ>("11");
	cout<<resto(B1,mod1,B2,mod2,E1,E2);
}
